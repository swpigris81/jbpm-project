<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
                http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd" 
				default-autowire="byName" default-lazy-init="true">

	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:/config.properties</value>
			</list>
		</property>
	</bean>
	
	<import resource="classpath*:/applicationContext-dwr-message.xml" />
	<import resource="classpath*:/applicationContext-system-jms.xml" />
	<import resource="classpath*:/applicationContext-common-dao.xml" />
	<import resource="classpath*:/applicationContext-system-dao.xml" />
	<import resource="classpath*:/applicationContext-system-service.xml" />
	<import resource="classpath*:/applicationContext-system-action.xml" />
	<import resource="classpath*:/applicationContext-system-quartz.xml" />
	<!-- JBPM5.3 -->
	<import resource="classpath*:/applicationContext-jbpm-service.xml" />
	
	<!-- C3P0数据源配置 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${hibernate.driverClassName}"></property>
		<!-- 本地数据库 -->
		<property name="jdbcUrl"
			value="${hibernate.url}">
		</property>
		<property name="properties" ref="dataSourceProperties"></property>
		<!-- 连接池中保留的最小连接数. -->
		<property name="minPoolSize" value="5"></property>
		<!-- 连接池中保留的最大连接数。Default: 15  -->
		<property name="maxPoolSize" value="30"></property>
		<!-- 最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="1800"></property>
		<!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="5"></property>
		<!--
			JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements
			属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0
		-->
		<property name="maxStatements" value="0"></property>
		<!-- 初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3  -->
		<property name="initialPoolSize" value="10"></property>
		<!-- 每1800秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="1800"></property>
		<!-- 定义在从数据库获取新连接失败后重复尝试的次数。Default: 30  -->
		<property name="acquireRetryAttempts" value="30"></property>
		<!-- 两次连接中间隔时间，单位毫秒，默认为1000 -->
		<property name="acquireRetryDelay" value="1000"></property>
		<!-- 连接关闭时默认将所有未提交的操作回滚。默认为false -->
		<property name="autoCommitOnClose" value="false"></property>
		<!--
			获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效
			保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试
			获取连接失败后该数据源将申明已断开并永久关闭。Default: false
		-->
		<property name="breakAfterAcquireFailure" value="false"></property>
		<!-- 
			当连接池用完时客户端调用getConnection()后等待获取新连接的时间，
			超时后将抛出SQLException，如设为0则无限期等待。单位毫秒，默认为0
		-->
		<property name="checkoutTimeout" value="0"></property>
		<!-- 
			C3P0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能，
			通过多线程实现多个操作同时被执行。默认为3
		-->
		<property name="numHelperThreads" value="3"></property>
		<!--
			因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的
			时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable
			等方法来提升连接测试的性能。Default: false
		-->
		<property name="testConnectionOnCheckout" value="false"></property>
		<!-- 如果设为true那么在取得连接的同时将校验连接的有效性。默认为false -->
		<property name="testConnectionOnCheckin" value="false"></property>
	</bean>
	<bean id="dataSourceProperties" class="com.webservice.system.util.PropertiesEncryptFactoryBean">
		<property name="properties">
			<props>
				<prop key="user">${hibernate.username}</prop><!-- FSpZoipCml0kfuP5dmkK9A== -->
				<!-- 本地 -->
				<prop key="password">${hibernate.password}</prop><!-- NqyeJz0ck2I= -->
				<!-- 服务器 -->
				<!-- <prop key="password">PaHPxH1BC2XlwQ0NGj+V7g==</prop> -->
			</props>
		</property>
	</bean>
	
	<!-- <bean id="dataSource_jndi" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName">
			<value>${dataSource.jndiName}</value>
		</property>
	</bean> -->

	<!-- ************************** Hibernate SessionFacotry ******************** -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource" ref="${dataSource.switch}" />
		<!-- 这种方式在WAS中存在问题，Weblogic可以使用, 不建议使用这种方式 -->
		<!-- <property name="mappingDirectoryLocations">
			<list>
				<value>classpath:/com/huateng/db/hbm/</value>
			</list>
		</property> -->
		<!-- class = "org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean"
		<property name="packagesToScan">
               <list>
                    <value>org.projects.graduates.domain</value>
               </list>
		</property> -->
		<property name="mappingResources">
			<list>
				<value>META-INF/ProcessInstanceInfo.hbm.xml</value>
				<!-- 系统管理 -->
				<value>com/webservice/system/codelist/bean/xml/CodeList.hbm.xml</value>
				<value>com/webservice/system/codelist/bean/xml/CodeListData.hbm.xml</value>
				<value>com/webservice/system/invitation/bean/xml/SystemInviteProcess.hbm.xml</value>
				<value>com/webservice/system/menu/bean/xml/ButtonInfo.hbm.xml</value>
				<value>com/webservice/system/menu/bean/xml/MenuInfo.hbm.xml</value>
				<value>com/webservice/system/message/bean/xml/SystemMessage.hbm.xml</value>
				<value>com/webservice/system/right/bean/xml/RightInfo.hbm.xml</value>
				<value>com/webservice/system/role/bean/xml/RoleInfo.hbm.xml</value>
				<value>com/webservice/system/role/bean/xml/RoleMenuInfo.hbm.xml</value>
				<value>com/webservice/system/role/bean/xml/UserRole.hbm.xml</value>
				<value>com/webservice/system/systembackup/bean/xml/SystemBackupInfo.hbm.xml</value>
				<value>com/webservice/system/systembackup/bean/xml/SystemBackupSettingInfo.hbm.xml</value>
				<value>com/webservice/system/user/bean/xml/UserInfo.hbm.xml</value>
			</list>
		</property>

		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.use_outer_join">${hibernate.use_outer_join}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
				<prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
				<prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<prop key="hibernate.transaction.flush_before_completion">true</prop>
				<prop key="hibernate.autoReconnect">true</prop>
			</props>
		</property>
	</bean>

	<!-- jdbcTemplate -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="${dataSource.switch}" />
	</bean>
	
	<!-- JDBC事务控制机制(全局事务) -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager" autowire="byName">
		<property name="dataSource" ref="${dataSource.switch}" />
	</bean>
	<!-- 在业务逻辑层中使用延迟加载 -->
	<bean id="hibernateInterceptor" class="org.springframework.orm.hibernate3.HibernateInterceptor">
		<property name="sessionFactory">
			<ref bean="sessionFactory"/>
		</property>
	</bean>
	<!-- Hibernate局部事务 -->
	<bean id="hibernateTransactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager"
		autowire="byName">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- 事务级别 -->
	<bean id="matchAllWithPropReq"
		class="org.springframework.transaction.interceptor.NameMatchTransactionAttributeSource">
		<property name="properties">
			<props>
				<prop key="*insert*">
					PROPAGATION_REQUIRED,-Exception
				</prop>
				<prop key="*save*">
					PROPAGATION_REQUIRED,-Exception
				</prop>
				<prop key="*create*">
					PROPAGATION_REQUIRED,-Exception
				</prop>
				<prop key="*update*">
					PROPAGATION_REQUIRED,-Exception
				</prop>
				<prop key="*delete*">
					PROPAGATION_REQUIRED,-Exception
				</prop>
				<prop key="*del*">
					PROPAGATION_REQUIRED,-Exception
				</prop>
				<prop key="*get*">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="*find*">PROPAGATION_SUPPORTS,readOnly</prop>
				<prop key="*">PROPAGATION_SUPPORTS</prop>
			</props>
		</property>
	</bean>
	<!-- 配置hibernate事务 -->
	<bean id="matchAllTxInterceptor"
		class="org.springframework.transaction.interceptor.TransactionInterceptor">
		<property name="transactionManager">
			<ref bean="hibernateTransactionManager" />
		</property>
		<property name="transactionAttributeSource">
			<ref bean="matchAllWithPropReq" />
		</property>
	</bean>

	<!-- 配置自动代理 -->
	<bean id="autoProxyCreator"
		class="org.springframework.aop.framework.autoproxy.BeanNameAutoProxyCreator">
		<property name="beanNames">
			<list>
				<value>*Service</value>
			</list>
		</property>
		<property name="interceptorNames">
			<list>
				<value>matchAllTxInterceptor</value>
			</list>
		</property>
	</bean>
	<!-- 代理服务 -->
	<bean id="serviceProxy" abstract="true"
		class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager">
			<ref bean="transactionManager" />
		</property>
		<property name="transactionAttributes">
			<props>
				<prop key="*">PROPAGATION_REQUIRED</prop>
				<!-- <prop key="sa*">PROPAGATION_REQUIRED</prop>
				<prop key="add*">PROPAGATION_REQUIRED</prop>
				<prop key="ins*">PROPAGATION_REQUIRED</prop>
				<prop key="del*">PROPAGATION_REQUIRED</prop>
				<prop key="upd*">PROPAGATION_REQUIRED</prop>
				<prop key="mod*">PROPAGATION_REQUIRED</prop> -->
			</props>
		</property>
	</bean>
</beans>